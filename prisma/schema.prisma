generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Group {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  permissions Permission[]
  updatedAt   DateTime     @default(dbgenerated("(datetime('now'))")) @updatedAt
  createAt    DateTime     @default(dbgenerated("(datetime('now'))"))
  isActive    Boolean      @default(true)
  users       UserGroups[]

  @@map("groups")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  groups      Group[]
  updatedAt   DateTime @default(dbgenerated("(datetime('now'))")) @updatedAt
  createAt    DateTime @default(dbgenerated("(datetime('now'))"))
  isActive    Boolean  @default(true)

  @@map("permissions")
}

model Photo {
  id        Int      @id @default(autoincrement())
  url       String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @default(dbgenerated("(datetime('now'))")) @updatedAt
  createAt  DateTime @default(dbgenerated("(datetime('now'))"))
  isActive  Boolean  @default(true)

  @@map("photos")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  fullName     String
  email        String?      @unique
  passwordHash String?
  photos       Photo[]
  updatedAt    DateTime     @default(dbgenerated("(datetime('now'))")) @updatedAt
  createAt     DateTime     @default(dbgenerated("(datetime('now'))"))
  isActive     Boolean      @default(true)
  groups       UserGroups[]

  @@map("users")
}

model UserGroups {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@id([userId, groupId])
  @@map("userGroups")
}
